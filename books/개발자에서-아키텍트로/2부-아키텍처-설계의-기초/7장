7장 패턴으로 기초 만들기 확장성 있고, 유지 보수가 용이하고, 신뢰성 있고, 고가용성을 가진 소프트웨어 시스템이 수십 년간 만들어져 있다. 소프트웨어 아키텍처 패턴은 알려진 몇 가지 구조의 조합으로 품질 속성을 끌어올리는 방법이다. 잘 알려진 패턴을 사용하면 대화하고 설득하기가 용이하다.   레이어패턴 가장 흔히 사용되고 필요 이상으로 남용되는 패턴. 코드를 나누고, 관심사별로 독립적인 레이어를 구분하면 개발자들이 함께 일하기가 수월하다. 레이어 간에 결합은 낮추고 응집을 높이면 유지 보수성이 높아진다.  포트와 어댑터 패턴 핵심 비즈니스 로직을 격리할 때 유용. 다양한 주제에 작용할 수 있을뿐더러 데이터와 이벤트를 격리된 환경에서 테스트할 수 있음.  파이프와 필터 패턴 요소 하나하나는 필터라고 부르며 단방향으로 데이터를 변경하는 작업만. 데이터는 필터에서 필터로 빠르게 흐르고, 병렬적으로 데이터 처리가 이루어짐 데이터 분석과 처리에서 자주 사용됨. 유닉스 명령어 pipe  서비스 지향 아키텍처 패턴 특정 기능을 가진 컴포넌트를 독립적인 서비스로 구현 서비스를 사용하는 측에서는 각 서비스가 어떻게 구현되었는지는 몰라도 서비스를 불러내고 실행할 수 있어야함.  발행/구독 패턴 발행자와 구독자가 서로 독립적으로 존재하며 서로를 모르는 형태의 패턴. 다수의 독립적인 컴포넌트가 동일한 정보를 다루고 싶을 때 주로 사용  공유 데이터 패턴 다수의 컴포넌트가 하나의 데이터 저장소에 접근하고 사용하는 패턴. 많은 컴포넌트가 많은 데이터를 필요로 할 때 유용  멀티 계층 패턴 실행 중인 소프트웨어를 논리적인 단위로 나누어 구성한 패턴 각 논리적인 단위의 그룹은 하드웨어에 설치될 수 있음.  숙련된 전문가 패턴 하나의 전문가 팀이 패턴부터 실습, 관련 지원 도구, 교육까지 모든 사항을 결정하고 진행. 시스템을 직접 개발하고 배포하진 않지만 다른 팀이 수행하는 개발 업무를 더욱 효율적으로 만드는 지원 팀  오픈소스 공헌 패턴 아키텍처 컴포넌트를 만들 때 팀원만 개발하지 않을 것이라고 생각할 때 적용할 수 있는 패턴 팀은 자신이 만드는 컴포넌트가 폭넓은 분야 중에서도 어떤 경우에 딱 맞는지 확실하게 이해하고 가야함. 팀의 책임감을 높이려면 쓰기권한을 팀에게만 부여  큰 진흙 공 패턴 큰 진흙 공 패턴은 정의된 요소와 관계 따위가 없다. 어떤 품질 속성도 끌어올리지 않고, 진흙 공은 유지 보수성과 확정성을 크게 떨어트린다. 큰 진흙 패턴은 이론으로 정립되지는 않지만 실제 상황에서는 흔히 마주치는 현상임. 장시간의 설계와 통합에 필요한 비용을 짧은 개발 기간으로 맞바꾸는 장점이 있다. 아키텍처 원리의 이해가 결이되었거나 개발 문화가 성숙하지 않는 경우에는 불쑥 등장함.    
